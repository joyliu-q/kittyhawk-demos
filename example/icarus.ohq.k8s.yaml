---
# Source: icarus/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ohq-django-asgi"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: "ohq-django-asgi"
---
# Source: icarus/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ohq-django-wsgi"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: "ohq-django-wsgi"
---
# Source: icarus/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ohq-react"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: "ohq-react"
---
# Source: icarus/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ohq-redis"
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    name: "ohq-redis"
---
# Source: icarus/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: "ohq-celery"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: "ohq-celery"
---
# Source: icarus/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "ohq-django-asgi"
  namespace: joyliu
  labels:
    name: "ohq-django-asgi"
spec:
  replicas: 4
  selector:
    matchLabels:
      name: "ohq-django-asgi"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 0
  template:
    metadata:
      labels:
        name: "ohq-django-asgi"
    spec:
      containers:
        - name: "worker"
          image: "pennlabs/office-hours-queue-backend:latest"
          imagePullPolicy: IfNotPresent
          command:
            - "/usr/local/bin/asgi-run"
          ports:
            - containerPort: 80
          envFrom:
            - secretRef:
                name: office-hours-queue
          env:
            - name: "DOMAIN"
              value: "ohq.io"
            - name: "DJANGO_SETTINGS_MODULE"
              value: "officehoursqueue.settings.production"
            - name: "REDIS_URL"
              value: "redis://office-hours-queue-redis:6379"
---
# Source: icarus/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "ohq-django-wsgi"
  namespace: joyliu
  labels:
    name: "ohq-django-wsgi"
spec:
  replicas: 8
  selector:
    matchLabels:
      name: "ohq-django-wsgi"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 0
  template:
    metadata:
      labels:
        name: "ohq-django-wsgi"
    spec:
      containers:
        - name: "worker"
          image: "pennlabs/office-hours-queue-backend:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          envFrom:
            - secretRef:
                name: office-hours-queue
          env:
            - name: "DOMAIN"
              value: "ohq.io"
            - name: "DJANGO_SETTINGS_MODULE"
              value: "officehoursqueue.settings.production"
            - name: "REDIS_URL"
              value: "redis://office-hours-queue-redis:6379"
---
# Source: icarus/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "ohq-react"
  namespace: joyliu
  labels:
    name: "ohq-react"
spec:
  replicas: 2
  selector:
    matchLabels:
      name: "ohq-react"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 0
  template:
    metadata:
      labels:
        name: "ohq-react"
    spec:
      containers:
        - name: "worker"
          image: "pennlabs/office-hours-queue-frontend:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          env:
            - name: "PORT"
              value: "80"
            - name: "DOMAIN"
              value: "ohq.io"
---
# Source: icarus/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "ohq-redis"
  namespace: joyliu
  labels:
    name: "ohq-redis"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: "ohq-redis"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 0
  template:
    metadata:
      labels:
        name: "ohq-redis"
    spec:
      containers:
        - name: "worker"
          image: "redis:6.0"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
---
# Source: icarus/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "ohq-celery"
  namespace: joyliu
  labels:
    name: "ohq-celery"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: "ohq-celery"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 0
  template:
    metadata:
      labels:
        name: "ohq-celery"
    spec:
      containers:
        - name: "worker"
          image: "pennlabs/office-hours-queue-backend:latest"
          imagePullPolicy: IfNotPresent
          command:
            - "celery"
            - "-A"
            - "officehoursqueue"
            - "worker"
            - "-lINFO"
          ports:
            - containerPort: 80
          envFrom:
            - secretRef:
                name: office-hours-queue
          env:
            - name: "DJANGO_SETTINGS_MODULE"
              value: "officehoursqueue.settings.production"
            - name: "REDIS_URL"
              value: "redis://office-hours-queue-redis:6379"
---
# Source: icarus/templates/crontabs.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "ohq-calculate-waits"
  namespace: joyliu
  labels:
    name: "ohq-calculate-waits"
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: "worker"
              image: pennlabs/office-hours-queue-backend:latest
              imagePullPolicy: IfNotPresent
              command:
                - "python"
                - "manage.py"
                - "calculatewaittimes"
              envFrom:
                - secretRef:
                    name: office-hours-queue
---
# Source: icarus/templates/crontabs.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "ohq-queue-daily-stat"
  namespace: joyliu
  labels:
    name: "ohq-queue-daily-stat"
spec:
  schedule: "0 8 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: "worker"
              image: pennlabs/office-hours-queue-backend:latest
              imagePullPolicy: IfNotPresent
              command:
                - "python"
                - "manage.py"
                - "queue_daily_stat"
              envFrom:
                - secretRef:
                    name: office-hours-queue
---
# Source: icarus/templates/crontabs.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "ohq-queue-heatmap-stat"
  namespace: joyliu
  labels:
    name: "ohq-queue-heatmap-stat"
spec:
  schedule: "0 8 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: "worker"
              image: pennlabs/office-hours-queue-backend:latest
              imagePullPolicy: IfNotPresent
              command:
                - "python"
                - "manage.py"
                - "queue_heatmap_stat"
              envFrom:
                - secretRef:
                    name: office-hours-queue
---
# Source: icarus/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ohq-django-asgi
  namespace: joyliu
spec:
  rules:
    - host: "ohq.io"
      http:
        paths:
          - path: "/api/ws"
            backend:
              serviceName: ohq-django-asgi
              servicePort: 80
  tls:
    - hosts:
        - "ohq.io"
      secretName: ohq-io-tls
---
# Source: icarus/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ohq-django-wsgi
  namespace: joyliu
spec:
  rules:
    - host: "ohq.io"
      http:
        paths:
          - path: "/api"
            backend:
              serviceName: ohq-django-wsgi
              servicePort: 80
          - path: "/admin"
            backend:
              serviceName: ohq-django-wsgi
              servicePort: 80
          - path: "/assets"
            backend:
              serviceName: ohq-django-wsgi
              servicePort: 80
  tls:
    - hosts:
        - "ohq.io"
      secretName: ohq-io-tls
---
# Source: icarus/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ohq-react
  namespace: joyliu
spec:
  rules:
    - host: "ohq.io"
      http:
        paths:
          - path: "/"
            backend:
              serviceName: ohq-react
              servicePort: 80
  tls:
    - hosts:
        - "ohq.io"
      secretName: ohq-io-tls
---
# Source: icarus/templates/certificates.yaml
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: ohq-io
  annotations:
    "helm.sh/resource-policy": keep
spec:
  secretName: ohq-io-tls
  dnsNames:
    - "ohq.io"
    - "*.ohq.io"
  issuerRef:
    name: wildcard-letsencrypt-prod
    kind: ClusterIssuer
    group: cert-manager.io
---
# Source: icarus/templates/certificates.yaml
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: ohq-io
  annotations:
    "helm.sh/resource-policy": keep
spec:
  secretName: ohq-io-tls
  dnsNames:
    - "ohq.io"
    - "*.ohq.io"
  issuerRef:
    name: wildcard-letsencrypt-prod
    kind: ClusterIssuer
    group: cert-manager.io
---
# Source: icarus/templates/certificates.yaml
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: ohq-io
  annotations:
    "helm.sh/resource-policy": keep
spec:
  secretName: ohq-io-tls
  dnsNames:
    - "ohq.io"
    - "*.ohq.io"
  issuerRef:
    name: wildcard-letsencrypt-prod
    kind: ClusterIssuer
    group: cert-manager.io
